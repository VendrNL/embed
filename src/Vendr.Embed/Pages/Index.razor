@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@PageHeading</PageTitle>

@if (_loading)
{
    <MudStack AlignItems="AlignItems.Center" Class="py-10" Spacing="3">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudText Typo="Typo.subtitle1">Gegevens worden geladenâ€¦</MudText>
    </MudStack>
}
else if (!string.IsNullOrEmpty(_error))
{
    <MudAlert Severity="Severity.Error" Elevation="2" Class="my-6">
        @_error
    </MudAlert>
}
else
{
    <MudStack Spacing="3">
        <MudPaper Class="pa-4" Elevation="1">
            <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                <MudSelect T="string" @bind-Value="SelectedProvince" Label="Provincie" Clearable="true" Dense="true">
                    <MudSelectItem Value="">Alle provincies</MudSelectItem>
                    @foreach (var province in _availableProvinces)
                    {
                        <MudSelectItem Value="@province">@province</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="string" @bind-Value="SelectedType" Label="Type vastgoed" Clearable="true" Dense="true">
                    <MudSelectItem Value="">Alle typen</MudSelectItem>
                    @foreach (var type in _availableTypes)
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="string" @bind-Value="SelectedStatus" Label="Status" Clearable="true" Dense="true">
                    <MudSelectItem Value="">Alle statussen</MudSelectItem>
                    @foreach (var option in _statusOptions)
                    {
                        <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudPaper>

        <MudText Typo="Typo.subtitle1" Style="font-weight:600;">
            @_filtered.Count resultaat@(_filtered.Count == 1 ? string.Empty : "en")
        </MudText>

        <MudGrid GutterSize="GutterSize.Medium">
            @foreach (var listing in _filtered)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="1" Class="h-100 d-flex flex-column">
                        <MudCardMedia Image="@GetImage(listing)" Height="180px" />
                        <MudCardContent Class="d-flex flex-column gap-2">
                            <MudChip Color="Color.Primary" Variant="Variant.Filled" Label="true">@listing.StatusLabel()</MudChip>
                            <MudText Typo="Typo.h6" Class="mb-0">@listing.Name</MudText>
                            <MudText Typo="Typo.body2" Class="text-secondary">@listing.FullAddress</MudText>
                            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="text-caption text-secondary">
                                <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Small" />
                                <MudText Typo="Typo.caption">@listing.ComputedProvince</MudText>
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions Class="mt-auto">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@listing.Url" Target="_blank" Rel="noopener">
                                Bekijk op Vendr
                                <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Class="ml-1" Size="Size.Small" />
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudStack>
}

@code {
    private const string PlaceholderImage = "data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23e5e7eb'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='Arial' font-size='16' fill='%23111827'%3EGeen afbeelding%3C/text%3E%3C/svg%3E";

    private readonly IReadOnlyDictionary<string, string> _statusOptions = new Dictionary<string, string>
    {
        ["available"] = "Beschikbaar",
        ["under_bid"] = "Onder bod",
        ["sold_stc"] = "Verkocht o.v.",
        ["sold"] = "Verkocht"
    };

    private readonly List<Listing> _listings = new();
    private readonly List<Listing> _filtered = new();
    private readonly List<string> _availableProvinces = new();
    private readonly List<string> _availableTypes = new();

    private string? _selectedProvince;
    private string? _selectedType;
    private string? _selectedStatus;
    private string? _error;
    private bool _loading = true;
    private RealtorMeta? _meta;

    private string PageHeading => _meta?.Name ?? "Vendr Embed";

    [CascadingParameter]
    public App? RootApp { get; set; }

    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private RenderFragment HeaderFragment => @<MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        @if (!string.IsNullOrEmpty(_meta?.Logo))
        {
            <MudAvatar Size="Size.Medium" Image="@_meta.Logo" Alt="@_meta?.Name" />
        }
        <MudStack Spacing="0.5">
            <MudText Typo="Typo.h6">@PageHeading</MudText>
            @if (!string.IsNullOrWhiteSpace(_meta?.Website))
            {
                <MudLink Href="@FormatWebsite(_meta!.Website!)" Target="_blank" Rel="noopener">@_meta!.Website</MudLink>
            }
        </MudStack>
    </MudStack>;

    private async Task LoadDataAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        query.TryGetValue("realtor", out var realtorValues);
        var realtorKey = realtorValues.FirstOrDefault()?.Trim().ToLowerInvariant();

        query.TryGetValue("feed", out var feedValues);
        var overrideFeed = feedValues.FirstOrDefault()?.Trim();

        if (string.IsNullOrWhiteSpace(realtorKey) && string.IsNullOrWhiteSpace(overrideFeed))
        {
            throw new InvalidOperationException("Gebruik de parameter ?realtor= of ?feed= om een makelaar te tonen.");
        }

        IReadOnlyList<Listing> listings;

        if (!string.IsNullOrWhiteSpace(overrideFeed))
        {
            listings = await FetchListingsAsync(overrideFeed!);
        }
        else
        {
            listings = await LoadFromMappingAsync(realtorKey!);
        }

        foreach (var listing in listings)
        {
            listing.Enrich();
            _listings.Add(listing);
        }

        _availableProvinces.AddRange(_listings.Select(l => l.ComputedProvince).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase));
        _availableTypes.AddRange(_listings.Select(l => l.ComputedType).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase));

        _availableProvinces.Sort(StringComparer.OrdinalIgnoreCase);
        _availableTypes.Sort(StringComparer.OrdinalIgnoreCase);

        ApplyFilters();

        if (_meta is not null)
        {
            Layout?.SetHeader(HeaderFragment);

            if (!string.IsNullOrWhiteSpace(_meta.Color) && RootApp is not null)
            {
                var palette = new Palette
                {
                    Primary = _meta.Color,
                    Secondary = _meta.Color,
                    AppbarBackground = _meta.Color,
                    AppbarText = "#ffffff"
                };

                await RootApp.SetPaletteAsync(palette);
            }
        }
    }

    private async Task<IReadOnlyList<Listing>> FetchListingsAsync(string url)
    {
        var result = await Http.GetFromJsonAsync<List<Listing>>(url);
        if (result is null)
        {
            throw new InvalidOperationException($"Kon feed niet laden: {url}");
        }
        return result;
    }

    private async Task<IReadOnlyList<Listing>> LoadFromMappingAsync(string realtorKey)
    {
        var map = await Http.GetFromJsonAsync<RealtorMap>("data/realtors.json");
        if (map?.Realtors is null)
        {
            throw new InvalidOperationException("Bestand data/realtors.json is ongeldig of mist.");
        }

        if (!map.Realtors.TryGetValue(realtorKey, out var meta))
        {
            throw new InvalidOperationException($"Onbekende makelaar \"{realtorKey}\".");
        }

        _meta = meta;

        if (!string.IsNullOrWhiteSpace(meta.Uuid))
        {
            var localPath = $"data/realtor-{meta.Uuid}.json";
            try
            {
                return await FetchListingsAsync(localPath);
            }
            catch
            {
                // val terug op externe feed
            }
        }

        if (!string.IsNullOrWhiteSpace(meta.Feed))
        {
            return await FetchListingsAsync(meta.Feed);
        }

        throw new InvalidOperationException("Geen geldige feed gevonden voor deze makelaar.");
    }

    private void ApplyFilters()
    {
        _filtered.Clear();

        foreach (var listing in _listings)
        {
            if (!string.IsNullOrEmpty(_selectedProvince) && !string.Equals(listing.ComputedProvince, _selectedProvince, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            if (!string.IsNullOrEmpty(_selectedType) && !string.Equals(listing.ComputedType, _selectedType, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            var status = listing.NormalizeStatus();
            if (!string.IsNullOrEmpty(_selectedStatus) && !string.Equals(status, _selectedStatus, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            _filtered.Add(listing);
        }
    }

    private string GetImage(Listing listing)
        => string.IsNullOrWhiteSpace(listing.Image) ? PlaceholderImage : listing.Image;

    private string FormatWebsite(string website)
        => website.StartsWith("http", StringComparison.OrdinalIgnoreCase) ? website : $"https://{website}";

    private string? SelectedProvince
    {
        get => _selectedProvince;
        set
        {
            _selectedProvince = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }

    private string? SelectedType
    {
        get => _selectedType;
        set
        {
            _selectedType = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }

    private string? SelectedStatus
    {
        get => _selectedStatus;
        set
        {
            _selectedStatus = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }
}
