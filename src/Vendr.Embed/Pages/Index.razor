@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@using MudBlazor.Utilities

<PageTitle>@PageHeading</PageTitle>

@if (_loading)
{
    <MudStack AlignItems="AlignItems.Center" Class="py-10" Spacing="3">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudText Typo="Typo.subtitle1">Gegevens worden geladenâ€¦</MudText>
    </MudStack>
}
else if (!string.IsNullOrEmpty(_error))
{
    <MudAlert Severity="Severity.Error" Elevation="2" Class="my-6">
        @_error
    </MudAlert>
}
else
{
    <MudStack Spacing="3">
        <MudStack Row="true" AlignItems="AlignItems.Stretch" Spacing="2" Class="layout-root">
            <MudPaper Class="@($"filters-panel pa-4{(_filtersCollapsed ? " collapsed" : string.Empty)}")" Elevation="1">
                <MudStack Spacing="1.5">
                    <MudStack Row="true" AlignItems="AlignItems.Center" JustifyContent="Justify.SpaceBetween" Class="filters-header">
                        <MudText Typo="Typo.subtitle2" Class="filters-title">Filters</MudText>
                        <MudTooltip Text="@(_filtersCollapsed ? "Filters openen" : "Filters inklappen")">
                            <MudIconButton Icon="@FilterToggleIcon"
                                           Color="Color.Primary"
                                           Variant="Variant.Text"
                                           Size="Size.Small"
                                           OnClick="ToggleFilters"
                                           Class="toggle-button" />
                        </MudTooltip>
                    </MudStack>
                    <MudDivider />
                    <MudCollapse Expanded="@(!_filtersCollapsed)">
                        <MudStack Spacing="1.5" Class="filters-content">
                            <MudSelect T="string" @bind-Value="SelectedProvince" Label="Provincie" Clearable="true" Dense="true" DisableUnderLine="true">
                                <MudSelectItem Value="">Alle provincies</MudSelectItem>
                                @foreach (var province in _availableProvinces)
                                {
                                    <MudSelectItem Value="@province">@province</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="string" @bind-Value="SelectedType" Label="Type vastgoed" Clearable="true" Dense="true" DisableUnderLine="true">
                                <MudSelectItem Value="">Alle typen</MudSelectItem>
                                @foreach (var type in _availableTypes)
                                {
                                    <MudSelectItem Value="@type">@type</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="string" @bind-Value="SelectedStatus" Label="Status" Clearable="true" Dense="true" DisableUnderLine="true">
                                <MudSelectItem Value="">Alle statussen</MudSelectItem>
                                @foreach (var option in _statusOptions)
                                {
                                    <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>
                    </MudCollapse>
                </MudStack>
            </MudPaper>

            <MudStack Class="main-column" Spacing="2" Style="@MainFontStyle">
                <MudText Typo="Typo.subtitle1" Class="font-semibold">
                    @_filtered.Count resultaat@(_filtered.Count == 1 ? string.Empty : "en")
                </MudText>

                <MudGrid GutterSize="GutterSize.Medium">
                    @foreach (var listing in _filtered)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Elevation="@_cardElevation" Outlined="@_cardOutlined" Class="h-100 d-flex flex-column" Style="@GetCardStyle()">
                                <MudCardMedia Image="@GetImage(listing)" Height="@($"{_cardImageHeight}px")" Style="@GetCardMediaStyle()" />
                                <MudCardContent Class="d-flex flex-column gap-2">
                                    <MudChip Color="Color.Primary" Variant="Variant.Filled" Label="true">@listing.StatusLabel()</MudChip>
                                    <MudText Typo="Typo.h6" Class="mb-0">@listing.Name</MudText>
                                    <MudText Typo="Typo.body2" Class="text-secondary">@listing.FullAddress</MudText>
                                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center" Class="text-caption text-secondary">
                                        <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Small" />
                                        <MudText Typo="Typo.caption">@listing.ComputedProvince</MudText>
                                    </MudStack>
                                </MudCardContent>
                                <MudCardActions Class="mt-auto">
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="@listing.Url" Target="_blank" Rel="noopener">
                                        Bekijk op Vendr
                                        <MudIcon Icon="@Icons.Material.Filled.OpenInNew" Class="ml-1" Size="Size.Small" />
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudStack>

            <MudPaper Class="style-panel pa-4" Elevation="1">
                <MudStack Spacing="1.5">
                    <MudStack Spacing="0.5">
                        <MudText Typo="Typo.subtitle2">Stijl</MudText>
                        <MudText Typo="Typo.caption" Class="text-secondary">Pas de kleuren en kaarten visueel aan.</MudText>
                    </MudStack>
                    <MudDivider />

                    <MudTreeView ExpandOnClick="true">
                        <MudTreeViewItem Text="Kleuren" @bind-Expanded="ColorsExpanded">
                            <Content>
                                <MudStack Spacing="0.75" Class="mt-2">
                                    <MudStack Spacing="0.75">
                                        <MudText Typo="Typo.caption" Class="font-semibold">Primaire kleur</MudText>
                                        <MudColorPicker @bind-Color="PrimaryColor" DisableAlpha="true" PickerVariant="PickerVariant.Static" Class="color-picker" />
                                    </MudStack>

                                    <MudStack Spacing="0.75">
                                        <MudText Typo="Typo.caption" Class="font-semibold">Accentkleur</MudText>
                                        <MudColorPicker @bind-Color="SecondaryColor" DisableAlpha="true" PickerVariant="PickerVariant.Static" Class="color-picker" />
                                    </MudStack>
                                </MudStack>
                            </Content>
                        </MudTreeViewItem>

                        <MudTreeViewItem Text="Typografie" @bind-Expanded="TypographyExpanded">
                            <Content>
                                <MudStack Spacing="0.75" Class="mt-2">
                                    <MudText Typo="Typo.caption" Class="font-semibold">Lettertype</MudText>
                                    <MudSelect T="string" @bind-Value="_selectedFontKey" Dense="true" DisableUnderLine="true">
                                        @foreach (var option in _fontOptions)
                                        {
                                            <MudSelectItem Value="@option.Key">@option.Key</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </Content>
                        </MudTreeViewItem>

                        <MudTreeViewItem Text="Kaartopmaak" @bind-Expanded="CardLayoutExpanded">
                            <Content>
                                <MudStack Spacing="0.75" Class="mt-2">
                                    <MudStack Spacing="0.75">
                                        <MudText Typo="Typo.caption" Class="font-semibold">Kaart-elevatie</MudText>
                                        <MudSlider T="int" @bind-Value="_cardElevation" Min="0" Max="12" Step="1" Color="Color.Primary" ValueLabel="true" />
                                    </MudStack>

                                    <MudStack Spacing="0.75">
                                        <MudText Typo="Typo.caption" Class="font-semibold">Hoekradius</MudText>
                                        <MudSlider T="int" @bind-Value="_cardCornerRadius" Min="0" Max="32" Step="2" Color="Color.Primary" ValueLabel="true" />
                                    </MudStack>

                                    <MudStack Spacing="0.75">
                                        <MudText Typo="Typo.caption" Class="font-semibold">Afbeelding hoogte</MudText>
                                        <MudSlider T="int" @bind-Value="_cardImageHeight" Min="140" Max="260" Step="10" Color="Color.Primary" ValueLabel="true" />
                                    </MudStack>

                                    <MudSwitch @bind-Checked="_cardOutlined" Color="Color.Primary" Label="Rand zichtbaar" />
                                </MudStack>
                            </Content>
                        </MudTreeViewItem>
                    </MudTreeView>
                </MudStack>
            </MudPaper>
        </MudStack>
    </MudStack>
}

@code {
    private const string PlaceholderImage = "data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23e5e7eb'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='Arial' font-size='16' fill='%23111827'%3EGeen afbeelding%3C/text%3E%3C/svg%3E";

    private readonly IReadOnlyDictionary<string, string> _statusOptions = new Dictionary<string, string>
    {
        ["available"] = "Beschikbaar",
        ["under_bid"] = "Onder bod",
        ["sold_stc"] = "Verkocht o.v.",
        ["sold"] = "Verkocht"
    };

    private readonly List<Listing> _listings = new();
    private readonly List<Listing> _filtered = new();
    private readonly List<string> _availableProvinces = new();
    private readonly List<string> _availableTypes = new();
    private readonly Dictionary<string, string> _fontOptions = new(StringComparer.OrdinalIgnoreCase)
    {
        ["Inter"] = "'Inter', system-ui, -apple-system, 'Segoe UI', sans-serif",
        ["Roboto"] = "'Roboto', -apple-system, 'Segoe UI', sans-serif",
        ["Roboto Slab"] = "'Roboto Slab', 'Times New Roman', serif"
    };

    private string? _selectedProvince;
    private string? _selectedType;
    private string? _selectedStatus;
    private bool _filtersCollapsed;
    private bool _cardOutlined;
    private int _cardElevation = 1;
    private int _cardCornerRadius = 12;
    private int _cardImageHeight = 180;
    private string _selectedFontKey = "Inter";
    private MudColor _primaryColor = DefaultPrimaryColor;
    private MudColor _secondaryColor = DefaultSecondaryColor;
    private string? _error;
    private bool _loading = true;
    private RealtorMeta? _meta;
    private StyleSection _expandedSection = StyleSection.None;

    private string PageHeading => _meta?.Name ?? "Vendr Embed";

    [CascadingParameter]
    public App? RootApp { get; set; }

    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private RenderFragment HeaderFragment => @<MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
        @if (!string.IsNullOrEmpty(_meta?.Logo))
        {
            <MudAvatar Size="Size.Medium" Image="@_meta.Logo" Alt="@_meta?.Name" />
        }
        <MudStack Spacing="0.5">
            <MudText Typo="Typo.h6">@PageHeading</MudText>
            @if (!string.IsNullOrWhiteSpace(_meta?.Website))
            {
                <MudLink Href="@FormatWebsite(_meta!.Website!)" Target="_blank" Rel="noopener">@_meta!.Website</MudLink>
            }
        </MudStack>
    </MudStack>;

    private async Task LoadDataAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        query.TryGetValue("realtor", out var realtorValues);
        var realtorKey = realtorValues.FirstOrDefault()?.Trim().ToLowerInvariant();

        query.TryGetValue("feed", out var feedValues);
        var overrideFeed = feedValues.FirstOrDefault()?.Trim();

        if (string.IsNullOrWhiteSpace(realtorKey) && string.IsNullOrWhiteSpace(overrideFeed))
        {
            throw new InvalidOperationException("Gebruik de parameter ?realtor= of ?feed= om een makelaar te tonen.");
        }

        IReadOnlyList<Listing> listings;

        if (!string.IsNullOrWhiteSpace(overrideFeed))
        {
            listings = await FetchListingsAsync(overrideFeed!);
        }
        else
        {
            listings = await LoadFromMappingAsync(realtorKey!);
        }

        foreach (var listing in listings)
        {
            listing.Enrich();
            _listings.Add(listing);
        }

        _availableProvinces.AddRange(_listings.Select(l => l.ComputedProvince).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase));
        _availableTypes.AddRange(_listings.Select(l => l.ComputedType).Where(s => !string.IsNullOrWhiteSpace(s)).Distinct(StringComparer.OrdinalIgnoreCase));

        _availableProvinces.Sort(StringComparer.OrdinalIgnoreCase);
        _availableTypes.Sort(StringComparer.OrdinalIgnoreCase);

        ApplyFilters();

        if (_meta is not null)
        {
            Layout?.SetHeader(HeaderFragment);

            InitializeStyleFromMeta(_meta);
        }

        await ApplyCurrentPaletteAsync();
    }

    private async Task<IReadOnlyList<Listing>> FetchListingsAsync(string url)
    {
        var result = await Http.GetFromJsonAsync<List<Listing>>(url);
        if (result is null)
        {
            throw new InvalidOperationException($"Kon feed niet laden: {url}");
        }
        return result;
    }

    private async Task<IReadOnlyList<Listing>> LoadFromMappingAsync(string realtorKey)
    {
        var map = await Http.GetFromJsonAsync<RealtorMap>("data/realtors.json");
        if (map?.Realtors is null)
        {
            throw new InvalidOperationException("Bestand data/realtors.json is ongeldig of mist.");
        }

        if (!map.Realtors.TryGetValue(realtorKey, out var meta))
        {
            throw new InvalidOperationException($"Onbekende makelaar \"{realtorKey}\".");
        }

        _meta = meta;

        if (!string.IsNullOrWhiteSpace(meta.Uuid))
        {
            var localPath = $"data/realtor-{meta.Uuid}.json";
            try
            {
                return await FetchListingsAsync(localPath);
            }
            catch
            {
                // val terug op externe feed
            }
        }

        if (!string.IsNullOrWhiteSpace(meta.Feed))
        {
            return await FetchListingsAsync(meta.Feed);
        }

        throw new InvalidOperationException("Geen geldige feed gevonden voor deze makelaar.");
    }

    private void ApplyFilters()
    {
        _filtered.Clear();

        foreach (var listing in _listings)
        {
            if (!string.IsNullOrEmpty(_selectedProvince) && !string.Equals(listing.ComputedProvince, _selectedProvince, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            if (!string.IsNullOrEmpty(_selectedType) && !string.Equals(listing.ComputedType, _selectedType, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            var status = listing.NormalizeStatus();
            if (!string.IsNullOrEmpty(_selectedStatus) && !string.Equals(status, _selectedStatus, StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            _filtered.Add(listing);
        }
    }

    private string GetImage(Listing listing)
        => string.IsNullOrWhiteSpace(listing.Image) ? PlaceholderImage : listing.Image;

    private string FormatWebsite(string website)
        => website.StartsWith("http", StringComparison.OrdinalIgnoreCase) ? website : $"https://{website}";

    private string FilterToggleIcon => _filtersCollapsed ? Icons.Material.Filled.ChevronRight : Icons.Material.Filled.ChevronLeft;

    private string MainFontStyle
        => _fontOptions.TryGetValue(_selectedFontKey, out var stack)
            ? $"font-family:{stack};"
            : $"font-family:{_fontOptions["Inter"]};";

    private string GetCardStyle()
        => $"border-radius:{_cardCornerRadius}px;";

    private string GetCardMediaStyle()
        => $"border-top-left-radius:{_cardCornerRadius}px;border-top-right-radius:{_cardCornerRadius}px;";

    private string? SelectedProvince
    {
        get => _selectedProvince;
        set
        {
            _selectedProvince = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }

    private string? SelectedType
    {
        get => _selectedType;
        set
        {
            _selectedType = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }

    private string? SelectedStatus
    {
        get => _selectedStatus;
        set
        {
            _selectedStatus = string.IsNullOrWhiteSpace(value) ? null : value;
            ApplyFilters();
        }
    }

    private MudColor PrimaryColor
    {
        get => _primaryColor;
        set
        {
            if (_primaryColor.Equals(value))
            {
                return;
            }

            _primaryColor = value;
            _ = ApplyCurrentPaletteAsync();
        }
    }

    private MudColor SecondaryColor
    {
        get => _secondaryColor;
        set
        {
            if (_secondaryColor.Equals(value))
            {
                return;
            }

            _secondaryColor = value;
            _ = ApplyCurrentPaletteAsync();
        }
    }

    private void ToggleFilters()
    {
        _filtersCollapsed = !_filtersCollapsed;
    }

    private void InitializeStyleFromMeta(RealtorMeta meta)
    {
        if (!string.IsNullOrWhiteSpace(meta.Color))
        {
            _primaryColor = SafeCreateColor(meta.Color);
            _secondaryColor = _primaryColor;
        }
    }

    private void SetExpandedSection(StyleSection section, bool expanded)
    {
        if (expanded)
        {
            _expandedSection = section;
        }
        else if (_expandedSection == section)
        {
            _expandedSection = StyleSection.None;
        }
    }

    private bool ColorsExpanded
    {
        get => _expandedSection == StyleSection.Colors;
        set => SetExpandedSection(StyleSection.Colors, value);
    }

    private bool TypographyExpanded
    {
        get => _expandedSection == StyleSection.Typography;
        set => SetExpandedSection(StyleSection.Typography, value);
    }

    private bool CardLayoutExpanded
    {
        get => _expandedSection == StyleSection.CardLayout;
        set => SetExpandedSection(StyleSection.CardLayout, value);
    }

    private async Task ApplyCurrentPaletteAsync()
    {
        if (RootApp is null)
        {
            return;
        }

        var palette = new Palette
        {
            Primary = ToHex(_primaryColor),
            Secondary = ToHex(_secondaryColor),
            AppbarBackground = ToHex(_primaryColor),
            AppbarText = "#ffffff"
        };

        await RootApp.SetPaletteAsync(palette);
    }

    private static MudColor SafeCreateColor(string value)
    {
        try
        {
            return new MudColor(value);
        }
        catch
        {
            return DefaultPrimaryColor;
        }
    }

    private static string ToHex(MudColor color)
        => $"#{color.R:X2}{color.G:X2}{color.B:X2}";

    private static readonly MudColor DefaultPrimaryColor = new("#005c77");
    private static readonly MudColor DefaultSecondaryColor = new("#2196f3");

    private enum StyleSection
    {
        None,
        Colors,
        Typography,
        CardLayout
    }
}
